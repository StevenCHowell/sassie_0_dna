# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RQconv', [dirname(__file__)])
        except ImportError:
            import _RQconv
            return _RQconv
        if fp is not None:
            try:
                _mod = imp.load_module('_RQconv', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RQconv = swig_import_helper()
    del swig_import_helper
else:
    import _RQconv
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


Pi = _RQconv.Pi
class ExpPara(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpPara, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpPara, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wavelength"] = _RQconv.ExpPara_wavelength_set
    __swig_getmethods__["wavelength"] = _RQconv.ExpPara_wavelength_get
    if _newclass:wavelength = _swig_property(_RQconv.ExpPara_wavelength_get, _RQconv.ExpPara_wavelength_set)
    __swig_setmethods__["bm_ctr_x"] = _RQconv.ExpPara_bm_ctr_x_set
    __swig_getmethods__["bm_ctr_x"] = _RQconv.ExpPara_bm_ctr_x_get
    if _newclass:bm_ctr_x = _swig_property(_RQconv.ExpPara_bm_ctr_x_get, _RQconv.ExpPara_bm_ctr_x_set)
    __swig_setmethods__["bm_ctr_y"] = _RQconv.ExpPara_bm_ctr_y_set
    __swig_getmethods__["bm_ctr_y"] = _RQconv.ExpPara_bm_ctr_y_get
    if _newclass:bm_ctr_y = _swig_property(_RQconv.ExpPara_bm_ctr_y_get, _RQconv.ExpPara_bm_ctr_y_set)
    __swig_setmethods__["ratioDw"] = _RQconv.ExpPara_ratioDw_set
    __swig_getmethods__["ratioDw"] = _RQconv.ExpPara_ratioDw_get
    if _newclass:ratioDw = _swig_property(_RQconv.ExpPara_ratioDw_get, _RQconv.ExpPara_ratioDw_set)
    __swig_setmethods__["det_orient"] = _RQconv.ExpPara_det_orient_set
    __swig_getmethods__["det_orient"] = _RQconv.ExpPara_det_orient_get
    if _newclass:det_orient = _swig_property(_RQconv.ExpPara_det_orient_get, _RQconv.ExpPara_det_orient_set)
    __swig_setmethods__["det_tilt"] = _RQconv.ExpPara_det_tilt_set
    __swig_getmethods__["det_tilt"] = _RQconv.ExpPara_det_tilt_get
    if _newclass:det_tilt = _swig_property(_RQconv.ExpPara_det_tilt_get, _RQconv.ExpPara_det_tilt_set)
    __swig_setmethods__["det_phi"] = _RQconv.ExpPara_det_phi_set
    __swig_getmethods__["det_phi"] = _RQconv.ExpPara_det_phi_get
    if _newclass:det_phi = _swig_property(_RQconv.ExpPara_det_phi_get, _RQconv.ExpPara_det_phi_set)
    __swig_setmethods__["grazing_incident"] = _RQconv.ExpPara_grazing_incident_set
    __swig_getmethods__["grazing_incident"] = _RQconv.ExpPara_grazing_incident_get
    if _newclass:grazing_incident = _swig_property(_RQconv.ExpPara_grazing_incident_get, _RQconv.ExpPara_grazing_incident_set)
    __swig_setmethods__["incident_angle"] = _RQconv.ExpPara_incident_angle_set
    __swig_getmethods__["incident_angle"] = _RQconv.ExpPara_incident_angle_get
    if _newclass:incident_angle = _swig_property(_RQconv.ExpPara_incident_angle_get, _RQconv.ExpPara_incident_angle_set)
    __swig_setmethods__["sample_normal"] = _RQconv.ExpPara_sample_normal_set
    __swig_getmethods__["sample_normal"] = _RQconv.ExpPara_sample_normal_get
    if _newclass:sample_normal = _swig_property(_RQconv.ExpPara_sample_normal_get, _RQconv.ExpPara_sample_normal_set)
    __swig_setmethods__["beam_tX"] = _RQconv.ExpPara_beam_tX_set
    __swig_getmethods__["beam_tX"] = _RQconv.ExpPara_beam_tX_get
    if _newclass:beam_tX = _swig_property(_RQconv.ExpPara_beam_tX_get, _RQconv.ExpPara_beam_tX_set)
    __swig_setmethods__["beam_tY"] = _RQconv.ExpPara_beam_tY_set
    __swig_getmethods__["beam_tY"] = _RQconv.ExpPara_beam_tY_get
    if _newclass:beam_tY = _swig_property(_RQconv.ExpPara_beam_tY_get, _RQconv.ExpPara_beam_tY_set)
    __swig_setmethods__["flip"] = _RQconv.ExpPara_flip_set
    __swig_getmethods__["flip"] = _RQconv.ExpPara_flip_get
    if _newclass:flip = _swig_property(_RQconv.ExpPara_flip_get, _RQconv.ExpPara_flip_set)
    __swig_setmethods__["det_rot"] = _RQconv.ExpPara_det_rot_set
    __swig_getmethods__["det_rot"] = _RQconv.ExpPara_det_rot_get
    if _newclass:det_rot = _swig_property(_RQconv.ExpPara_det_rot_get, _RQconv.ExpPara_det_rot_set)
    __swig_setmethods__["det_rot_T"] = _RQconv.ExpPara_det_rot_T_set
    __swig_getmethods__["det_rot_T"] = _RQconv.ExpPara_det_rot_T_get
    if _newclass:det_rot_T = _swig_property(_RQconv.ExpPara_det_rot_T_get, _RQconv.ExpPara_det_rot_T_set)
    __swig_setmethods__["qr0"] = _RQconv.ExpPara_qr0_set
    __swig_getmethods__["qr0"] = _RQconv.ExpPara_qr0_get
    if _newclass:qr0 = _swig_property(_RQconv.ExpPara_qr0_get, _RQconv.ExpPara_qr0_set)
    __swig_setmethods__["qz0"] = _RQconv.ExpPara_qz0_set
    __swig_getmethods__["qz0"] = _RQconv.ExpPara_qz0_get
    if _newclass:qz0 = _swig_property(_RQconv.ExpPara_qz0_get, _RQconv.ExpPara_qz0_set)
    __swig_setmethods__["dq"] = _RQconv.ExpPara_dq_set
    __swig_getmethods__["dq"] = _RQconv.ExpPara_dq_get
    if _newclass:dq = _swig_property(_RQconv.ExpPara_dq_get, _RQconv.ExpPara_dq_set)
    __swig_setmethods__["nr"] = _RQconv.ExpPara_nr_set
    __swig_getmethods__["nr"] = _RQconv.ExpPara_nr_get
    if _newclass:nr = _swig_property(_RQconv.ExpPara_nr_get, _RQconv.ExpPara_nr_set)
    __swig_setmethods__["nz"] = _RQconv.ExpPara_nz_set
    __swig_getmethods__["nz"] = _RQconv.ExpPara_nz_get
    if _newclass:nz = _swig_property(_RQconv.ExpPara_nz_get, _RQconv.ExpPara_nz_set)
    def __init__(self): 
        this = _RQconv.new_ExpPara()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RQconv.delete_ExpPara
    __del__ = lambda self : None;
ExpPara_swigregister = _RQconv.ExpPara_swigregister
ExpPara_swigregister(ExpPara)

class vec2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _RQconv.vec2_x_set
    __swig_getmethods__["x"] = _RQconv.vec2_x_get
    if _newclass:x = _swig_property(_RQconv.vec2_x_get, _RQconv.vec2_x_set)
    __swig_setmethods__["y"] = _RQconv.vec2_y_set
    __swig_getmethods__["y"] = _RQconv.vec2_y_get
    if _newclass:y = _swig_property(_RQconv.vec2_y_get, _RQconv.vec2_y_set)
    def __init__(self): 
        this = _RQconv.new_vec2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RQconv.delete_vec2
    __del__ = lambda self : None;
vec2_swigregister = _RQconv.vec2_swigregister
vec2_swigregister(vec2)


def zinger(*args):
  return _RQconv.zinger(*args)
zinger = _RQconv.zinger

def dezinger(*args):
  return _RQconv.dezinger(*args)
dezinger = _RQconv.dezinger

def qrqz2xy(*args):
  return _RQconv.qrqz2xy(*args)
qrqz2xy = _RQconv.qrqz2xy

def qphi2xy(*args):
  return _RQconv.qphi2xy(*args)
qphi2xy = _RQconv.qphi2xy

def xy2q(*args):
  return _RQconv.xy2q(*args)
xy2q = _RQconv.xy2q

def xy2qrqz(*args):
  return _RQconv.xy2qrqz(*args)
xy2qrqz = _RQconv.xy2qrqz

def pos2qrqz(*args):
  return _RQconv.pos2qrqz(*args)
pos2qrqz = _RQconv.pos2qrqz

def cor_IAdep_2D(*args):
  return _RQconv.cor_IAdep_2D(*args)
cor_IAdep_2D = _RQconv.cor_IAdep_2D

def conv_to_Iq(*args):
  return _RQconv.conv_to_Iq(*args)
conv_to_Iq = _RQconv.conv_to_Iq

def get_value(*args):
  return _RQconv.get_value(*args)
get_value = _RQconv.get_value

def pre_conv_Iqrqz(*args):
  return _RQconv.pre_conv_Iqrqz(*args)
pre_conv_Iqrqz = _RQconv.pre_conv_Iqrqz

def conv_to_Iqrqz(*args):
  return _RQconv.conv_to_Iqrqz(*args)
conv_to_Iqrqz = _RQconv.conv_to_Iqrqz

def merge(*args):
  return _RQconv.merge(*args)
merge = _RQconv.merge

def calc_rot(*args):
  return _RQconv.calc_rot(*args)
calc_rot = _RQconv.calc_rot
# This file is compatible with both classic and new-style classes.


